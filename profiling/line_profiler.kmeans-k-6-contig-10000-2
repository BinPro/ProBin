Timer unit: 1e-06 s

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: cluster at line 8
Total time: 223.56 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def cluster(contigs, model, cluster_count ,centroids=None, max_iter=100, repeat=10):
    10         2            8      4.0      0.0      (max_clustering_prob,max_centroids,max_clusters) = (-np.inf,None,None)
    11         2            4      2.0      0.0      if repeat != 1:
    12         1            6      6.0      0.0          (max_clustering_prob,max_centroids,max_clusters) = cluster(contigs, model, cluster_count ,centroids=None, max_iter=100, repeat=repeat-1)
    13         2            4      2.0      0.0      if centroids is None:
    14         2     79459922 39729961.0     35.5         centroids = _generate_kplusplus(contigs,model,cluster_count,DNA.kmer_hash_count)
    15         2            3      1.5      0.0      clustering_prob = -np.inf
    16         2            2      1.0      0.0      cluster_different = True
    17                                               
    18         9           27      3.0      0.0      while (cluster_different and max_iter != 0):
    19                                           
    20         7    119428624 17061232.0     53.4          clusters = _expectation(contigs,model,centroids)
    21                                           
    22         7      5168843 738406.1      2.3          centroids = _maximization(contigs, model, clusters, centroids.shape)
    23                                                   
    24         7     19501589 2785941.3      8.7          curr_clustering_prob = _evaluate_clustering(centroids, clusters, model)
    25                                                   
    26         7           41      5.9      0.0          if (curr_clustering_prob <= clustering_prob):
    27         1            2      2.0      0.0              cluster_different = False
    28         1            2      2.0      0.0              if (curr_clustering_prob < clustering_prob):
    29                                                           print>>sys.stderr, "Clustering got worse, previous clustering probability : {0}, current clustering probability: {1}".format( clustering_prob, curr_clustering_prob)
    30         7           18      2.6      0.0          clustering_prob = curr_clustering_prob
    31         7           15      2.1      0.0          max_iter -= 1
    32         7          380     54.3      0.0          print>>sys.stderr,"repeate: {0}, max_iter {1}".format(repeat,max_iter)
    33         2           42     21.0      0.0      (curr_max_clust_prob, curr_max_centr, curr_max_clust) = max([(max_clustering_prob, max_centroids, max_clusters), (clustering_prob, centroids, clusters)],key=lambda x: x[0])
    34         2            7      3.5      0.0      return (curr_max_clust_prob, curr_max_centr, curr_max_clust)

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _expectation at line 36
Total time: 119.395 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                           @profile
    37                                           def _expectation(contigs, model, centroids):
    38        56          133      2.4      0.0      clusters = [set() for _ in xrange(len(centroids))]
    39      2100         2983      1.4      0.0      for contig in contigs:
    40     16744    119272464   7123.3     99.9          prob = [model.log_probability(contig.signature,centroid) for centroid in centroids]
    41      2093       111295     53.2      0.1          clust_ind = np.argmax(prob)
    42      2093         8367      4.0      0.0          clusters[clust_ind].add(contig)
    43         7            6      0.9      0.0      return clusters

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _maximization at line 45
Total time: 5.16466 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    45                                           @profile    
    46                                           def _maximization(contigs, model, clusters, centroids_shape):
    47         7          124     17.7      0.0      new_centroids = np.zeros(centroids_shape)
    48        56          135      2.4      0.0      for clust_ind ,clust in enumerate(clusters):
    49        49           73      1.5      0.0          if not clust:
    50                                                       select_as_centroid = np.random.randint(0,len(contigs))
    51                                                       new_centroid = model.fit_nonzero_parameters(contigs[select_as_centroid].signature,DNA.kmer_hash_count)
    52                                                   else:
    53        49         1386     28.3      0.0              new_centroid_count = Counter()
    54      2142      4589879   2142.8     88.9              [new_centroid_count.update(contig.signature) for contig in clust]
    55        49       572378  11681.2     11.1              new_centroid = model.fit_nonzero_parameters(new_centroid_count,DNA.kmer_hash_count)
    56        49          677     13.8      0.0          new_centroids[clust_ind,:] = new_centroid
    57         7            6      0.9      0.0      return new_centroids

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _generate_centroids at line 59
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    59                                           @profile
    60                                           def _generate_centroids(c_count,c_dim):
    61                                               centroids = np.random.rand(c_count,c_dim)
    62                                               centroids /= np.sum(centroids,axis=1,keepdims=True)
    63                                               return centroids

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _generate_kplusplus at line 65
Total time: 79.4294 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    65                                           @profile
    66                                           def _generate_kplusplus(contigs,model,c_count,c_dim):
    67         2           16      8.0      0.0      contigs_ind = range(len(contigs))
    68         2           32     16.0      0.0      centroids = np.zeros((c_count,c_dim))
    69         2           10      5.0      0.0      contig_ind = np.random.randint(0,len(contigs_ind))
    70         2            8      4.0      0.0      contigs_ind.remove(contig_ind)
    71         2        11894   5947.0      0.0      centroids[0,:] = model.fit_nonzero_parameters(contigs[contig_ind].signature,DNA.kmer_hash_count)
    72        14           23      1.6      0.0      for centroids_index in xrange(1,c_count):
    73        12          110      9.2      0.0          prob = {}
    74      3558         4091      1.1      0.0          for contig_ind in contigs_ind:
    75     15922     79317685   4981.6     99.9              sum_prob = sum([model.log_probability(contigs[contig_ind].signature,centroid) for centroid in centroids[:centroids_index]])
    76      3546        18319      5.2      0.0              prob[np.random.random()*sum_prob] = contig_ind
    77        12          312     26.0      0.0          furthest = min(prob)
    78        12           17      1.4      0.0          contig = contigs[prob[furthest]]
    79        12           57      4.8      0.0          contigs_ind.remove(prob[furthest])
    80        12        76785   6398.8      0.1          centroids[centroids_index,:] = model.fit_nonzero_parameters(contig.signature,DNA.kmer_hash_count)
    81         2            1      0.5      0.0      return centroids

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _evaluate_clustering at line 83
Total time: 19.4981 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile    
    84                                           def _evaluate_clustering(centroids,clusters, model):
    85         7            7      1.0      0.0      cluster_prob = 0
    86        56          137      2.4      0.0      for i,cluster in enumerate(clusters):
    87      2142     19497984   9102.7    100.0          cluster_prob += sum([model.log_probability(contig.signature,centroids[i]) for contig in cluster])
    88         7           16      2.3      0.0      return cluster_prob

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: fit_parameters at line 6
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def fit_parameters(sig):
     8                                               par = {}
     9                                               n = sum(sig.values())
    10                                               for i,v in sig.items():
    11                                                   par[i] = v/float(n)
    12                                               return par

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: fit_nonzero_parameters at line 13
Total time: 0.447863 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    13                                           @profile
    14                                           def fit_nonzero_parameters(sig,kmer_hash_count):
    15        63         1919     30.5      0.4      pseudo_sig = np.ones(kmer_hash_count)
    16    120472       106791      0.9     23.8      for key,cnt in sig.iteritems():
    17    120409       334518      2.8     74.7          pseudo_sig[key] += cnt
    18        63         4539     72.0      1.0      pseudo_sig /= np.sum(pseudo_sig)
    19        63           96      1.5      0.0      return pseudo_sig

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: log_probability at line 20
Total time: 114.081 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                           @profile
    21                                           def log_probability(signature, prob_vector):
    22     29120      3890493    133.6      3.4      log_prob_vector = np.log(prob_vector) 
    23     29120       155777      5.3      0.1      signature_vector = np.zeros(log_prob_vector.shape)
    24                                               
    25  49491828     46586775      0.9     40.8      for key,value in signature.iteritems():
    26  49462708     55416735      1.1     48.6          signature_vector[key] = value
    27                                           
    28     29120      8031255    275.8      7.0      return np.sum((signature_vector * log_prob_vector) - _log_fac(signature_vector)) + _log_fac(np.sum(signature_vector))

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: _log_fac at line 29
Total time: 5.57544 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                           @profile
    30                                           def _log_fac(i):
    31                                               # gammaln produces the natural logarithm of the factorial of i-1
    32     58240      5575438     95.7    100.0      return gammaln(i+1)

