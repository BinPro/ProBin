Timer unit: 1e-06 s

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: cluster at line 8
Total time: 1519.13 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def cluster(contigs, model, cluster_count ,centroids=None, max_iter=100, repeat=10):
    10         2            9      4.5      0.0      (max_clustering_prob,max_centroids,max_clusters) = (-np.inf,None,None)
    11         2            4      2.0      0.0      if repeat != 1:
    12         1            7      7.0      0.0          (max_clustering_prob,max_centroids,max_clusters) = cluster(contigs, model, cluster_count ,centroids=None, max_iter=100, repeat=repeat-1)
    13         2            4      2.0      0.0      if centroids is None:
    14         2    616898073 308449036.5     40.6         centroids = _generate_kplusplus(contigs,model,cluster_count,DNA.kmer_hash_count)
    15         2            4      2.0      0.0      clustering_prob = -np.inf
    16         2            3      1.5      0.0      cluster_different = True
    17                                               
    18        10           22      2.2      0.0      while (cluster_different and max_iter != 0):
    19                                           
    20         8    791983278 98997909.8     52.1          clusters = _expectation(contigs,model,centroids)
    21                                           
    22         8      7785126 973140.8      0.5          centroids = _maximization(contigs, model, clusters, centroids.shape)
    23                                                   
    24         8    102459677 12807459.6      6.7          curr_clustering_prob = _evaluate_clustering(centroids, clusters, model)
    25                                                   
    26         8           33      4.1      0.0          if (curr_clustering_prob <= clustering_prob):
    27         1            1      1.0      0.0              cluster_different = False
    28         1            1      1.0      0.0              if (curr_clustering_prob < clustering_prob):
    29                                                           print>>sys.stderr, "Clustering got worse, previous clustering probability : {0}, current clustering probability: {1}".format( clustering_prob, curr_clustering_prob)
    30         8           14      1.8      0.0          clustering_prob = curr_clustering_prob
    31         8           14      1.8      0.0          max_iter -= 1
    32         8          319     39.9      0.0          print>>sys.stderr,"repeate: {0}, max_iter {1}".format(repeat,max_iter)
    33         2           19      9.5      0.0      (curr_max_clust_prob, curr_max_centr, curr_max_clust) = max([(max_clustering_prob, max_centroids, max_clusters), (clustering_prob, centroids, clusters)],key=lambda x: x[0])
    34         2            3      1.5      0.0      return (curr_max_clust_prob, curr_max_centr, curr_max_clust)

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _expectation at line 36
Total time: 791.949 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                           @profile
    37                                           def _expectation(contigs, model, centroids):
    38        64          160      2.5      0.0      clusters = [set() for _ in xrange(len(centroids))]
    39      2400         2992      1.2      0.0      for contig in contigs:
    40     19136    791808989  41378.0    100.0          prob = [model.log_probability(contig.signature,centroid) for centroid in centroids]
    41      2392       127738     53.4      0.0          clust_ind = np.argmax(prob)
    42      2392         8898      3.7      0.0          clusters[clust_ind].add(contig)
    43         8            9      1.1      0.0      return clusters

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _maximization at line 45
Total time: 7.77922 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    45                                           @profile    
    46                                           def _maximization(contigs, model, clusters, centroids_shape):
    47         8          184     23.0      0.0      new_centroids = np.zeros(centroids_shape)
    48        64          185      2.9      0.0      for clust_ind ,clust in enumerate(clusters):
    49        56           99      1.8      0.0          if not clust:
    50                                                       select_as_centroid = np.random.randint(0,len(contigs))
    51                                                       new_centroid = model.fit_nonzero_parameters(contigs[select_as_centroid].signature,DNA.kmer_hash_count)
    52                                                   else:
    53        56         1885     33.7      0.0              new_centroid_count = Counter()
    54      2448      6934776   2832.8     89.1              [new_centroid_count.update(contig.signature) for contig in clust]
    55        56       841247  15022.3     10.8              new_centroid = model.fit_nonzero_parameters(new_centroid_count,DNA.kmer_hash_count)
    56        56          834     14.9      0.0          new_centroids[clust_ind,:] = new_centroid
    57         8            8      1.0      0.0      return new_centroids

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _generate_centroids at line 59
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    59                                           @profile
    60                                           def _generate_centroids(c_count,c_dim):
    61                                               centroids = np.random.rand(c_count,c_dim)
    62                                               centroids /= np.sum(centroids,axis=1,keepdims=True)
    63                                               return centroids

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _generate_kplusplus at line 65
Total time: 616.859 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    65                                           @profile
    66                                           def _generate_kplusplus(contigs,model,c_count,c_dim):
    67         2           22     11.0      0.0      contigs_ind = range(len(contigs))
    68         2           33     16.5      0.0      centroids = np.zeros((c_count,c_dim))
    69         2            8      4.0      0.0      contig_ind = np.random.randint(0,len(contigs_ind))
    70         2           12      6.0      0.0      contigs_ind.remove(contig_ind)
    71         2        14556   7278.0      0.0      centroids[0,:] = model.fit_nonzero_parameters(contigs[contig_ind].signature,DNA.kmer_hash_count)
    72        14           24      1.7      0.0      for centroids_index in xrange(1,c_count):
    73        12          212     17.7      0.0          prob = {}
    74      3558         5854      1.6      0.0          for contig_ind in contigs_ind:
    75     15922    616676790  38731.1    100.0              sum_prob = sum([model.log_probability(contigs[contig_ind].signature,centroid) for centroid in centroids[:centroids_index]])
    76      3546        28434      8.0      0.0              prob[np.random.random()*sum_prob] = contig_ind
    77        12          441     36.8      0.0          furthest = min(prob)
    78        12           26      2.2      0.0          contig = contigs[prob[furthest]]
    79        12           83      6.9      0.0          contigs_ind.remove(prob[furthest])
    80        12       132620  11051.7      0.0          centroids[centroids_index,:] = model.fit_nonzero_parameters(contig.signature,DNA.kmer_hash_count)
    81         2            2      1.0      0.0      return centroids

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _evaluate_clustering at line 83
Total time: 102.457 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile    
    84                                           def _evaluate_clustering(centroids,clusters, model):
    85         8            8      1.0      0.0      cluster_prob = 0
    86        64          125      2.0      0.0      for i,cluster in enumerate(clusters):
    87      2448    102456767  41853.3    100.0          cluster_prob += sum([model.log_probability(contig.signature,centroids[i]) for contig in cluster])
    88         8            7      0.9      0.0      return cluster_prob

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: fit_parameters at line 7
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def fit_parameters(sig):
     9                                               par = {}
    10                                               n = sum(sig.values())
    11                                               for i,v in sig.items():
    12                                                   par[i] = v/float(n)
    13                                               return par

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: fit_nonzero_parameters at line 14
Total time: 0.674567 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           @profile
    15                                           def fit_nonzero_parameters(sig,kmer_hash_count):
    16        70         2511     35.9      0.4      pseudo_sig = np.ones(kmer_hash_count)
    17    134292       162152      1.2     24.0      for key,cnt in sig.iteritems():
    18    134222       503619      3.8     74.7          pseudo_sig[key] += cnt
    19        70         6167     88.1      0.9      pseudo_sig /= np.sum(pseudo_sig)
    20        70          118      1.7      0.0      return pseudo_sig

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: log_probability at line 21
Total time: 1341.03 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    21                                           @profile    
    22                                           def log_probability(signature, prob_vector):
    23     31512      1188236     37.7      0.1      phi = sum(signature.values())
    24     31512        37339      1.2      0.0      log_prod = 0
    25  53552203     70440178      1.3      5.3      for i,cnt in signature.iteritems():
    26  53520691    765269475     14.3     57.1          denom = _log_fac(cnt)
    27  53520691    503588122      9.4     37.6          log_prod += (log(prob_vector[i])*cnt) - denom
    28     31512       510526     16.2      0.0      return log_prod + _log_fac(phi)

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: _log_fac at line 29
Total time: 370.65 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                           @profile
    30                                           def _log_fac(i):
    31                                               # gammaln produces the natural logarithm of the factorial of i-1
    32  53552203    370650450      6.9    100.0      return gammaln(i+1)

